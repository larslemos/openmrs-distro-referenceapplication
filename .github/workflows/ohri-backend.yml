name: OHRI Distro WITH O3 Images

on:
  push:
    branches:
      - "*"
    # Publish semver tags as releases.
  pull_request:
    types: [opened, synchronize]
  release:
    types:
      - created
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker_setup:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  docker_distro_backend:
    runs-on: ubuntu-latest
    needs: docker_setup
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/openmrs3-ohri-backend:latest,${{ secrets.DOCKERHUB_USERNAME }}/openmrs3-ohri-backend:ci_${{ github.run_number }}
          # tags: ${{ steps.meta.outputs.tags }}
          # labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=inline,ref=user/app:buildcache
          cache-to: type=inline,ref=user/app:buildcache,mode=max

  docker_distro_frontend:
    runs-on: ubuntu-latest
    needs: docker_setup
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          file: /frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/openmrs3-ohri-frontend:latest,${{ secrets.DOCKERHUB_USERNAME }}/openmrs3-ohri-frontend:ci_${{ github.run_number }}
          cache-from: type=inline,ref=user/app:buildcache
          cache-to: type=inline,ref=user/app:buildcache,mode=max
      - name: List dir
        run: |
          ls -la -t
          docker ps -a

  docker_distro_gateaway:
    runs-on: ubuntu-latest

    needs: docker_setup
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          file: /gateaway/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/openmrs3-ohri-gateaway:latest,${{ secrets.DOCKERHUB_USERNAME }}/openmrs3-ohri-gateaway:ci_${{ github.run_number }}
          cache-from: type=inline,ref=user/app:buildcache
          cache-to: type=inline,ref=user/app:buildcache,mode=max

  run_containers:
    runs-on: ubuntu-latest
    needs: [docker_distro_frontend, docker_distro_backend]
    steps:
      - name: Run container to validate if built of images was successful
        run: |
          docker compose build 
          docker compose up
      - name: Wait for server to start
        run: sleep 300

  sandbox:
    runs-on: ubuntu-latest

    needs: docker_setup

    # if: ${{ github.ref == 'refs/heads/working' }}

    steps:
      # Update the Microfrontends to reflect what we have in the Working branch
      - uses: garygrossgarten/github-action-ssh@release
        name: Run the Container in the Sandbox
        with:
          command: cd /usr/share/tomcat/distro/sandbox && docker run ${{ secrets.DOCKERHUB_USERNAME }}/openmrs-esm-ohri-frontend
          host: ${{ secrets.HISTAC_HOST }}
          username: ${{ secrets.HISTAC_USERNAME }}
          privateKey: ${{ secrets.HISTAC_KEY}}
          port: ${{ secrets.HISTAC_PORT }}

  #dev_3_ohri job, the tags property for the docker/build-push-action step is updated to include ${{ github.run_number }}, which is a unique identifier for each run. This will tag the dev image with an incremental count.

  #working_3_ohri job, the tags property for the docker/build-push-action step is updated to include ${{ github.run_number }}, which will tag the image with the runner timestamp. Also, the if property is updated to check for the working_3_ohri branch, and the `needs

  working_3_ohri:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-last, macos-latest]

    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/working_3_ohri' }}

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/openmrs3-backend:working_${{ github.run_number }}
      - name: Save image digest
        run: echo "::set-output name=image::${{ steps.build-and-push.outputs.digest }}"

  dev_3_ohri:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    needs: working_3_ohri

    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/dev_3_ohri' }}

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: build-an-push
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/openmrs3-backend:dev-${{ github.run_number}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Save image digest
        run: echo "::set-output name=image::${{ steps.build-and-push.output.digest }}"
